/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener, Input } from '@angular/core';
var RippleDirective = /** @class */ (function () {
    function RippleDirective(el) {
        this.el = el;
        this.ngFyRipple = undefined;
        if (document.getElementById("ngFyRippleStyles") == null) {
            /** @type {?} */
            var style = document.createElement('style');
            style.id = "ngFyRippleStyles";
            style.type = 'text/css';
            /** @type {?} */
            var keyFrames = "\n      *[ngfyripple],\n      *[ng-reflect-ng-fy-ripple] {\n        cursor: pointer;\n        position: relative;\n        overflow: hidden;\n      }\n      *[ngfyripple] *,\n      *[ng-reflect-ng-fy-ripple] * {\n        pointer-events: none;\n      }\n      *[ng-reflect-ng-fy-ripple] .ripple-div,\n      *[ngfyripple] .ripple-div {\n        position: absolute;\n        pointer-events: none;\n        border-radius: 50%;\n        background-color: rgba(0, 0, 0, 0.14);\n        z-index: 10;\n        animation: ngFyRipple 0.65s ease-out forwards;\n      }\n\n      *[ng-reflect-ng-fy-ripple] .ripple-div.ripple-remove,\n      *[ngfyripple] .ripple-div.ripple-remove {\n        animation: ngFyRippleRemove 0.3s ease-in forwards;\n      }\n      \n      @keyframes ngFyRipple {\n        0% {\n          opacity: 1;\n          transform: translate(-50%, -50%) scale(0.05);\n        }\n        100% {\n          opacity: 1;\n          transform: translate(-50%, -50%) scale(1);\n        }\n      }\n\n      @keyframes ngFyRippleRemove {\n        0% {\n          opacity: 1;\n          transform: translate(-50%, -50%) scale(1);\n        }\n        100% {\n          opacity: 0;\n          transform: translate(-50%, -50%) scale(1);\n        }\n      }\n      ";
            style.innerHTML = keyFrames.replace(/A_DYNAMIC_VALUE/g, "180deg");
            document.getElementsByTagName('head')[0].appendChild(style);
        }
    }
    /**
     * @return {?}
     */
    RippleDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} event
     * @return {?}
     */
    RippleDirective.prototype.mousedown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.ngFyRipple || (this.ngFyRipple != undefined && this.ngFyRipple.toString() == "")) {
            /** @type {?} */
            var child_1 = document.createElement('div');
            /** @type {?} */
            var weight = this.el.nativeElement.offsetHeight > this.el.nativeElement.offsetWidth ? this.el.nativeElement.offsetHeight : this.el.nativeElement.offsetWidth;
            /** @type {?} */
            var style = [
                "height:" + (weight * 2.4) + "px",
                "width:" + (weight * 2.4) + "px",
                "left:" + event.offsetX + "px",
                "top:" + event.offsetY + "px",
            ];
            child_1.style.cssText = style.join(";");
            child_1.classList.add('ripple-div');
            this.el.nativeElement.appendChild(child_1);
            setTimeout((/**
             * @return {?}
             */
            function () {
                child_1.classList.add("ripple-complated");
            }), 550);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    RippleDirective.prototype.mouseup = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _loop_1 = function (i) {
            /** @type {?} */
            var element = this_1.el.nativeElement.children[i];
            if (element.className.search("ripple-div") != -1 && element.className.search("ripple-remove") == -1) {
                if (element.className.search("ripple-complated") != -1) {
                    element.classList.add("ripple-remove");
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        element.parentNode.removeChild(element);
                    }), 350);
                }
                else {
                    /** @type {?} */
                    var checkInter_1 = setInterval((/**
                     * @return {?}
                     */
                    function () {
                        if (element.className.search("ripple-complated") != -1) {
                            element.classList.add("ripple-remove");
                            setTimeout((/**
                             * @return {?}
                             */
                            function () {
                                if (element != null && element.parentNode != null) {
                                    element.parentNode.removeChild(element);
                                }
                            }), 350);
                            clearInterval(checkInter_1);
                        }
                    }), 50);
                }
            }
        };
        var this_1 = this;
        for (var i = 0; i < this.el.nativeElement.children.length; i++) {
            _loop_1(i);
        }
    };
    RippleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngFyRipple]'
                },] }
    ];
    /** @nocollapse */
    RippleDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    RippleDirective.propDecorators = {
        ngFyRipple: [{ type: Input }],
        mousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
        mouseup: [{ type: HostListener, args: ['mouseup', ['$event'],] }]
    };
    return RippleDirective;
}());
export { RippleDirective };
if (false) {
    /** @type {?} */
    RippleDirective.prototype.ngFyRipple;
    /**
     * @type {?}
     * @private
     */
    RippleDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmlwcGxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWZ5LXJpcHBsZS8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3JpcHBsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBVSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHbkY7SUFPRSx5QkFDVSxFQUFlO1FBQWYsT0FBRSxHQUFGLEVBQUUsQ0FBYTtRQUhoQixlQUFVLEdBQVcsU0FBUyxDQUFDO1FBS3RDLElBQUksUUFBUSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLElBQUksRUFBRTs7Z0JBQ25ELEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztZQUMzQyxLQUFLLENBQUMsRUFBRSxHQUFHLGtCQUFrQixDQUFDO1lBQzlCLEtBQUssQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDOztnQkFDcEIsU0FBUyxHQUFHLDJ1Q0ErQ2Y7WUFDRCxLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDbEUsUUFBUSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3RDtJQUNILENBQUM7Ozs7SUFFRCxrQ0FBUTs7O0lBQVI7SUFFQSxDQUFDOzs7OztJQUVzQyxtQ0FBUzs7OztJQUFoRCxVQUFpRCxLQUFLO1FBQ3BELElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksU0FBUyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUU7O2dCQUNyRixPQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENB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OzRCQWtFTCxZQUFZLFNBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDOzBCQW1CcEMsWUFBWSxTQUFDLFNBQVMsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7SUEwQnJDLHNCQUFDO0NBQUEsQUFwSEQsSUFvSEM7U0FqSFksZUFBZTs7O0lBRTFCLHFDQUF3Qzs7Ozs7SUFHdEMsNkJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0TGlzdGVuZXIsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgdHlwZVdpdGhQYXJhbWV0ZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXIvc3JjL3JlbmRlcjMvdXRpbCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tuZ0Z5UmlwcGxlXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFJpcHBsZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIEBJbnB1dCgpIG5nRnlSaXBwbGU6Ym9vbGVhbiA9IHVuZGVmaW5lZDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGVsPzogRWxlbWVudFJlZlxyXG4gICkgeyAgICBcclxuICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5nRnlSaXBwbGVTdHlsZXNcIikgPT0gbnVsbCkge1xyXG4gICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xyXG4gICAgICBzdHlsZS5pZCA9IFwibmdGeVJpcHBsZVN0eWxlc1wiO1xyXG4gICAgICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcclxuICAgICAgdmFyIGtleUZyYW1lcyA9IGBcclxuICAgICAgKltuZ2Z5cmlwcGxlXSxcclxuICAgICAgKltuZy1yZWZsZWN0LW5nLWZ5LXJpcHBsZV0ge1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgICAgfVxyXG4gICAgICAqW25nZnlyaXBwbGVdICosXHJcbiAgICAgICpbbmctcmVmbGVjdC1uZy1meS1yaXBwbGVdICoge1xyXG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG4gICAgICB9XHJcbiAgICAgICpbbmctcmVmbGVjdC1uZy1meS1yaXBwbGVdIC5yaXBwbGUtZGl2LFxyXG4gICAgICAqW25nZnlyaXBwbGVdIC5yaXBwbGUtZGl2IHtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xNCk7XHJcbiAgICAgICAgei1pbmRleDogMTA7XHJcbiAgICAgICAgYW5pbWF0aW9uOiBuZ0Z5UmlwcGxlIDAuNjVzIGVhc2Utb3V0IGZvcndhcmRzO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAqW25nLXJlZmxlY3QtbmctZnktcmlwcGxlXSAucmlwcGxlLWRpdi5yaXBwbGUtcmVtb3ZlLFxyXG4gICAgICAqW25nZnlyaXBwbGVdIC5yaXBwbGUtZGl2LnJpcHBsZS1yZW1vdmUge1xyXG4gICAgICAgIGFuaW1hdGlvbjogbmdGeVJpcHBsZVJlbW92ZSAwLjNzIGVhc2UtaW4gZm9yd2FyZHM7XHJcbiAgICAgIH1cclxuICAgICAgXHJcbiAgICAgIEBrZXlmcmFtZXMgbmdGeVJpcHBsZSB7XHJcbiAgICAgICAgMCUge1xyXG4gICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpIHNjYWxlKDAuMDUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAxMDAlIHtcclxuICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIEBrZXlmcmFtZXMgbmdGeVJpcHBsZVJlbW92ZSB7XHJcbiAgICAgICAgMCUge1xyXG4gICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpIHNjYWxlKDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAxMDAlIHtcclxuICAgICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSBzY2FsZSgxKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgYDtcclxuICAgICAgc3R5bGUuaW5uZXJIVE1MID0ga2V5RnJhbWVzLnJlcGxhY2UoL0FfRFlOQU1JQ19WQUxVRS9nLCBcIjE4MGRlZ1wiKTtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChzdHlsZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuXHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdtb3VzZWRvd24nLCBbJyRldmVudCddKSBtb3VzZWRvd24oZXZlbnQpIHsgICAgXHJcbiAgICBpZiAodGhpcy5uZ0Z5UmlwcGxlIHx8ICh0aGlzLm5nRnlSaXBwbGUgIT0gdW5kZWZpbmVkICYmIHRoaXMubmdGeVJpcHBsZS50b1N0cmluZygpID09IFwiXCIpKSB7XHJcbiAgICAgIGxldCBjaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxyXG4gICAgICB3ZWlnaHQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0ID4gdGhpcy5lbC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoID8gdGhpcy5lbC5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodCA6IHRoaXMuZWwubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCxcclxuICAgICAgc3R5bGUgPSBbXHJcbiAgICAgICAgXCJoZWlnaHQ6XCIgKyAod2VpZ2h0ICogMi40KSArIFwicHhcIixcclxuICAgICAgICBcIndpZHRoOlwiICsgKHdlaWdodCAqIDIuNCkgKyBcInB4XCIsXHJcbiAgICAgICAgXCJsZWZ0OlwiICsgZXZlbnQub2Zmc2V0WCArIFwicHhcIixcclxuICAgICAgICBcInRvcDpcIiArIGV2ZW50Lm9mZnNldFkgKyBcInB4XCIsXHJcbiAgICAgIF07XHJcbiAgICAgIGNoaWxkLnN0eWxlLmNzc1RleHQgPSBzdHlsZS5qb2luKFwiO1wiKTtcclxuICAgICAgY2hpbGQuY2xhc3NMaXN0LmFkZCgncmlwcGxlLWRpdicpO1xyXG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBjaGlsZC5jbGFzc0xpc3QuYWRkKFwicmlwcGxlLWNvbXBsYXRlZFwiKTtcclxuICAgICAgfSwgNTUwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNldXAnLCBbJyRldmVudCddKSBtb3VzZXVwKGV2ZW50KSB7IFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbGV0IGVsZW1lbnQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5baV07XHJcbiAgICAgIGlmIChlbGVtZW50LmNsYXNzTmFtZS5zZWFyY2goXCJyaXBwbGUtZGl2XCIpICE9IC0xICYmIGVsZW1lbnQuY2xhc3NOYW1lLnNlYXJjaChcInJpcHBsZS1yZW1vdmVcIikgPT0gLTEpIHtcclxuICAgICAgICBpZiAoZWxlbWVudC5jbGFzc05hbWUuc2VhcmNoKFwicmlwcGxlLWNvbXBsYXRlZFwiKSAhPSAtMSkge1xyXG4gICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicmlwcGxlLXJlbW92ZVwiKTtcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XHJcbiAgICAgICAgICB9LCAzNTApO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgbGV0IGNoZWNrSW50ZXIgPSBzZXRJbnRlcnZhbCgoKT0+e1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5jbGFzc05hbWUuc2VhcmNoKFwicmlwcGxlLWNvbXBsYXRlZFwiKSAhPSAtMSkge1xyXG4gICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInJpcHBsZS1yZW1vdmVcIik7XHJcbiAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCAhPSBudWxsICYmIGVsZW1lbnQucGFyZW50Tm9kZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9LCAzNTApO1xyXG4gICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoY2hlY2tJbnRlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sNTApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0iXX0=